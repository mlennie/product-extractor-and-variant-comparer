<div class="home-container">
  <% if flash[:success] %>
    <div class="flash-message flash-success">
      <div class="flash-icon">‚úÖ</div>
      <div class="flash-content"><%= flash[:success] %></div>
    </div>
  <% end %>

  <% if flash[:error] %>
    <div class="flash-message flash-error">
      <div class="flash-icon">‚ùå</div>
      <div class="flash-content"><%= flash[:error] %></div>
    </div>
  <% end %>

  <div class="hero-section">
    <h1 class="app-title">AI Product Comparison Tool</h1>
    <p class="app-description">
      Extract product data from any URL and compare prices, variants, and find the best value automatically using AI.
    </p>
  </div>

  <% if @tracking_job %>
    <div class="job-tracking-section" data-job-id="<%= @tracking_job.id %>">
      <div class="tracking-header">
        <h2>üîÑ Processing Your Request</h2>
        <p>Extracting product data from: <strong><%= truncate(@tracking_job.url, length: 60) %></strong></p>
      </div>
      
      <div class="job-status-container">
        <div class="progress-bar-container">
          <div class="progress-bar" id="progress-bar">
            <div class="progress-fill" id="progress-fill" style="width: <%= @tracking_job.progress %>%"></div>
          </div>
          <div class="progress-text" id="progress-text"><%= @tracking_job.progress_display %></div>
        </div>
        
        <div class="status-info">
          <div class="status-badge" id="status-badge" data-status="<%= @tracking_job.status %>">
            <span class="status-icon" id="status-icon">‚è≥</span>
            <span class="status-text" id="status-text"><%= @tracking_job.status_display %></span>
          </div>
          <div class="job-time">Started at <%= @tracking_job.created_at.strftime('%I:%M %p') %></div>
        </div>
      </div>
      
      <div class="job-results" id="job-results" style="display: none;">
        <!-- Results will be populated by JavaScript -->
      </div>
      
      <div class="job-error" id="job-error" style="display: none;">
        <!-- Error details will be populated by JavaScript -->
      </div>
    </div>
  <% end %>

  <div class="extraction-form-container">
    <%= form_with url: extract_path, local: true, class: "extraction-form", id: "product-extraction-form" do |form| %>
      <div class="form-group">
        <%= form.label :url, "Product URL", class: "form-label" %>
        <%= form.url_field :url, 
            placeholder: "https://example.com/product", 
            class: "form-input",
            required: true,
            pattern: "https?://.+",
            title: "Please enter a valid URL starting with http:// or https://" %>
        <div class="form-help">
          Enter the URL of any product page (Amazon, Target, etc.)
        </div>
      </div>

      <div class="form-actions">
        <%= form.submit "Extract Product Data", 
            class: "btn btn-primary btn-large",
            data: { 
              disable_with: "üîÑ Extracting...",
              confirm: false
            } %>
      </div>
    <% end %>
  </div>

  <div class="features-section">
    <div class="feature-grid">
      <div class="feature-item">
        <div class="feature-icon">ü§ñ</div>
        <h3>AI-Powered</h3>
        <p>Advanced AI extracts product details, variants, and pricing automatically</p>
      </div>
      <div class="feature-item">
        <div class="feature-icon">üí∞</div>
        <h3>Best Value Analysis</h3>
        <p>Automatically calculates price-per-unit and identifies the best deals</p>
      </div>
      <div class="feature-item">
        <div class="feature-icon">‚ö°</div>
        <h3>Real-time Processing</h3>
        <p>Fast extraction with live progress updates and instant results</p>
      </div>
    </div>
  </div>
</div>

<style>
  .home-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Flash Messages */
  .flash-message {
    display: flex;
    align-items: center;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 8px;
    border: 1px solid;
    animation: slideIn 0.3s ease-out;
  }

  .flash-success {
    background-color: #f0fdf4;
    border-color: #bbf7d0;
    color: #166534;
  }

  .flash-error {
    background-color: #fef2f2;
    border-color: #fecaca;
    color: #dc2626;
  }

  .flash-icon {
    margin-right: 0.75rem;
    font-size: 1.25rem;
  }

  .flash-content {
    font-weight: 500;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .hero-section {
    text-align: center;
    margin-bottom: 3rem;
  }

  .app-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 1rem;
    line-height: 1.2;
  }

  .app-description {
    font-size: 1.125rem;
    color: #6b7280;
    line-height: 1.6;
    max-width: 600px;
    margin: 0 auto;
  }

  .extraction-form-container {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    margin-bottom: 3rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-label {
    display: block;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .form-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #d1d5db;
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.2s ease;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .form-input:invalid {
    border-color: #ef4444;
  }

  .form-help {
    font-size: 0.875rem;
    color: #6b7280;
    margin-top: 0.5rem;
  }

  .form-actions {
    text-align: center;
  }

  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 1rem;
  }

  .btn-primary {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(59, 130, 246, 0.3);
  }

  .btn-primary:active {
    transform: translateY(0);
  }

  .btn-large {
    padding: 1rem 2rem;
    font-size: 1.125rem;
  }

  .features-section {
    margin-top: 4rem;
  }

  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .feature-item {
    text-align: center;
    padding: 1.5rem;
    background: #f9fafb;
    border-radius: 12px;
    border: 1px solid #e5e7eb;
  }

  .feature-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .feature-item h3 {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }

  .feature-item p {
    color: #6b7280;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .home-container {
      padding: 1rem;
    }

    .app-title {
      font-size: 2rem;
    }

    .extraction-form-container {
      padding: 1.5rem;
    }

    .feature-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  /* Loading State */
  .btn[data-disable-with] {
    position: relative;
  }

  .btn[disabled] {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none !important;
  }

  /* Job Tracking Styles */
  .job-tracking-section {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 3rem;
    border: 2px solid #cbd5e1;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .tracking-header h2 {
    color: #1e293b;
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .tracking-header p {
    color: #64748b;
    margin-bottom: 1.5rem;
    word-break: break-all;
  }

  .job-status-container {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 2rem;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .progress-bar-container {
    flex: 1;
  }

  .progress-bar {
    width: 100%;
    height: 12px;
    background: #e2e8f0;
    border-radius: 6px;
    overflow: hidden;
    position: relative;
    margin-bottom: 0.5rem;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6 0%, #06b6d4 100%);
    border-radius: 6px;
    transition: width 0.5s ease;
    position: relative;
  }

  .progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  .progress-text {
    text-align: center;
    font-weight: 600;
    color: #475569;
    font-size: 0.875rem;
  }

  .status-info {
    text-align: right;
  }

  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
  }

  .status-badge[data-status="queued"] {
    background: #fef3c7;
    color: #92400e;
  }

  .status-badge[data-status="processing"] {
    background: #dbeafe;
    color: #1e40af;
    animation: pulse 2s infinite;
  }

  .status-badge[data-status="completed"] {
    background: #d1fae5;
    color: #065f46;
  }

  .status-badge[data-status="failed"] {
    background: #fee2e2;
    color: #dc2626;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }

  .status-icon {
    font-size: 1.125rem;
  }

  .job-time {
    font-size: 0.75rem;
    color: #64748b;
  }

  .job-results {
    background: #f0f9ff;
    border: 1px solid #0ea5e9;
    border-radius: 8px;
    padding: 1.5rem;
    margin-top: 1rem;
  }

  .job-results h3 {
    color: #0c4a6e;
    margin-bottom: 1rem;
    font-size: 1.125rem;
  }

  .result-item {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e0f2fe;
  }

  .result-item:last-child {
    border-bottom: none;
  }

  .job-error {
    background: #fef2f2;
    border: 1px solid #f87171;
    border-radius: 8px;
    padding: 1.5rem;
    margin-top: 1rem;
  }

  .job-error h3 {
    color: #dc2626;
    margin-bottom: 0.5rem;
    font-size: 1.125rem;
  }

  .error-details {
    color: #7f1d1d;
    font-family: monospace;
    font-size: 0.875rem;
    background: #fee2e2;
    padding: 0.75rem;
    border-radius: 4px;
    margin-top: 0.75rem;
  }

  /* Responsive Job Tracking */
  @media (max-width: 768px) {
    .job-status-container {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .status-info {
      text-align: left;
    }
    
    .job-tracking-section {
      padding: 1.5rem;
    }
  }

  /* Enhanced Results Styling */
  .results-header {
    margin-bottom: 2rem;
  }

  .results-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1rem 0;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }

  .summary-item {
    color: #475569;
    font-size: 0.9rem;
  }

  .export-actions {
    display: flex;
    gap: 0.75rem;
    margin-top: 1.5rem;
    flex-wrap: wrap;
  }

  .export-btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .csv-btn {
    background: #10b981;
    color: white;
  }

  .csv-btn:hover {
    background: #059669;
    transform: translateY(-1px);
  }

  .json-btn {
    background: #3b82f6;
    color: white;
  }

  .json-btn:hover {
    background: #2563eb;
    transform: translateY(-1px);
  }

  .share-btn {
    background: #8b5cf6;
    color: white;
  }

  .share-btn:hover {
    background: #7c3aed;
    transform: translateY(-1px);
  }

  /* Value Analysis Styling */
  .value-analysis {
    margin: 2rem 0;
    padding: 1.5rem;
    background: linear-gradient(135deg, #fef7cd 0%, #fbbf24 100%);
    border-radius: 12px;
    border: 2px solid #f59e0b;
  }

  .value-analysis h4 {
    color: #92400e;
    margin-bottom: 1rem;
    font-size: 1.125rem;
  }

  .analysis-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .analysis-item {
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 8px;
    font-size: 0.875rem;
  }

  .analysis-item.best {
    border-left: 4px solid #10b981;
  }

  .analysis-item.worst {
    border-left: 4px solid #ef4444;
  }

  .analysis-item.savings {
    border-left: 4px solid #3b82f6;
  }

  .analysis-item.count {
    border-left: 4px solid #8b5cf6;
  }

  /* Variants Table Styling */
  .variants-section {
    margin: 2rem 0;
  }

  .variants-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .variants-header h4 {
    color: #1e293b;
    margin: 0;
    font-size: 1.125rem;
  }

  .table-controls label {
    color: #475569;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .table-controls select {
    padding: 0.25rem 0.5rem;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 0.875rem;
  }

  .table-container {
    overflow-x: auto;
    background: white;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  }

  .variants-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.875rem;
  }

  .variants-table thead {
    background: #f9fafb;
  }

  .variants-table th {
    padding: 0.75rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #e5e7eb;
  }

  .variants-table td {
    padding: 0.75rem;
    border-bottom: 1px solid #f3f4f6;
    vertical-align: top;
  }

  .variants-table tbody tr:hover {
    background: #f9fafb;
  }

  .variants-table tr.best-value {
    background: #ecfdf5;
    border-left: 4px solid #10b981;
  }

  .variants-table tr.best-value:hover {
    background: #d1fae5;
  }

  .variant-name {
    min-width: 150px;
  }

  .variant-name strong {
    display: block;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .best-badge {
    display: inline-block;
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
    background: #10b981;
    color: white;
    border-radius: 12px;
    font-weight: 500;
  }

  .price, .price-per-unit {
    font-weight: 600;
    color: #059669;
  }

  .rank {
    font-weight: 600;
    color: #3b82f6;
  }

  .savings {
    color: #7c3aed;
    font-weight: 500;
  }

  /* Enhanced Responsive Design */
  @media (max-width: 768px) {
    .results-summary {
      grid-template-columns: 1fr;
    }
    
    .export-actions {
      flex-direction: column;
    }
    
    .export-btn {
      text-align: center;
    }
    
    .analysis-grid {
      grid-template-columns: 1fr;
    }
    
    .variants-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .table-controls {
      text-align: center;
    }
    
    .variants-table {
      font-size: 0.8rem;
    }
    
    .variants-table th,
    .variants-table td {
      padding: 0.5rem 0.25rem;
    }
  }

  @media (max-width: 640px) {
    .variants-table th:nth-child(3),
    .variants-table td:nth-child(3) {
      display: none; /* Hide quantity column on very small screens */
    }
  }
</style>

<% if @tracking_job %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const jobId = document.querySelector('.job-tracking-section').dataset.jobId;
    const pollInterval = 2000; // Poll every 2 seconds
    let pollTimer;
    
    // Status icons mapping
    const statusIcons = {
      'queued': '‚è≥',
      'processing': 'üîÑ',
      'completed': '‚úÖ',
      'failed': '‚ùå'
    };
    
    function updateJobStatus(data) {
      // Update progress bar
      const progressFill = document.getElementById('progress-fill');
      const progressText = document.getElementById('progress-text');
      if (progressFill && progressText) {
        progressFill.style.width = data.progress + '%';
        progressText.textContent = data.progress_display;
      }
      
      // Update status badge
      const statusBadge = document.getElementById('status-badge');
      const statusIcon = document.getElementById('status-icon');
      const statusText = document.getElementById('status-text');
      
      if (statusBadge && statusIcon && statusText) {
        statusBadge.setAttribute('data-status', data.status);
        statusIcon.textContent = statusIcons[data.status] || '‚è≥';
        statusText.textContent = data.status_display;
      }
      
      // Show results if completed
      if (data.status === 'completed' && data.product) {
        showJobResults(data);
      }
      
      // Show error if failed
      if (data.status === 'failed' && data.error_message) {
        showJobError(data);
      }
      
      // Stop polling if job is finished
      if (data.finished) {
        clearInterval(pollTimer);
        
        // Update header to show completion
        const header = document.querySelector('.tracking-header h2');
        if (header) {
          if (data.status === 'completed') {
            header.textContent = '‚úÖ Extraction Complete!';
          } else if (data.status === 'failed') {
            header.textContent = '‚ùå Extraction Failed';
          }
        }
      }
    }
    
    function showJobResults(data) {
      const resultsContainer = document.getElementById('job-results');
      if (!resultsContainer) return;
      
      let resultsHTML = '<div class="results-header">';
      resultsHTML += '<h3>üéâ Product Data Successfully Extracted!</h3>';
      resultsHTML += '<div class="results-summary">';
      resultsHTML += '<div class="summary-item"><strong>Product:</strong> ' + data.product.name + '</div>';
      resultsHTML += '<div class="summary-item"><strong>Variants Found:</strong> ' + data.product.variants_count + '</div>';
      
      if (data.processing_time) {
        resultsHTML += '<div class="summary-item"><strong>Processing Time:</strong> ' + data.processing_time + 's</div>';
      }
      resultsHTML += '</div>';
      
      // Export buttons
      resultsHTML += '<div class="export-actions">';
      resultsHTML += '<button onclick="exportResults(\'' + data.id + '\', \'csv\')" class="export-btn csv-btn">üìä Export CSV</button>';
      resultsHTML += '<button onclick="exportResults(\'' + data.id + '\', \'json\')" class="export-btn json-btn">üìÑ Export JSON</button>';
      resultsHTML += '<button onclick="shareResults(\'' + data.id + '\')" class="export-btn share-btn">üîó Share Results</button>';
      resultsHTML += '</div>';
      resultsHTML += '</div>';
      
      // Value Analysis Summary
      if (data.product.value_analysis) {
        const analysis = data.product.value_analysis;
        resultsHTML += '<div class="value-analysis">';
        resultsHTML += '<h4>üí∞ Value Analysis</h4>';
        resultsHTML += '<div class="analysis-grid">';
        resultsHTML += '<div class="analysis-item best"><strong>Best Value:</strong> ' + analysis.best_value_display + '</div>';
        resultsHTML += '<div class="analysis-item worst"><strong>Worst Value:</strong> ' + analysis.worst_value_display + '</div>';
        resultsHTML += '<div class="analysis-item savings"><strong>Max Savings:</strong> ' + analysis.max_savings_display + ' (' + analysis.max_savings_percentage + '%)</div>';
        resultsHTML += '<div class="analysis-item count"><strong>Variants with Savings:</strong> ' + analysis.variants_with_savings + '</div>';
        resultsHTML += '</div>';
        resultsHTML += '</div>';
      }
      
      // Detailed Variants Table
      if (data.product.variants && data.product.variants.length > 0) {
        resultsHTML += '<div class="variants-section">';
        resultsHTML += '<div class="variants-header">';
        resultsHTML += '<h4>üìã Product Variants</h4>';
        resultsHTML += '<div class="table-controls">';
        resultsHTML += '<label>Sort by: <select id="sort-select" onchange="sortTable(this.value)">';
        resultsHTML += '<option value="value_rank">Value Rank</option>';
        resultsHTML += '<option value="price_cents">Price (Low to High)</option>';
        resultsHTML += '<option value="price_cents_desc">Price (High to Low)</option>';
        resultsHTML += '<option value="name">Name</option>';
        resultsHTML += '</select></label>';
        resultsHTML += '</div>';
        resultsHTML += '</div>';
        
        resultsHTML += '<div class="table-container">';
        resultsHTML += '<table class="variants-table" id="variants-table">';
        resultsHTML += '<thead>';
        resultsHTML += '<tr>';
        resultsHTML += '<th>Variant</th>';
        resultsHTML += '<th>Price</th>';
        resultsHTML += '<th>Quantity</th>';
        resultsHTML += '<th>Price/Unit</th>';
        resultsHTML += '<th>Rank</th>';
        resultsHTML += '<th>Savings</th>';
        resultsHTML += '</tr>';
        resultsHTML += '</thead>';
        resultsHTML += '<tbody id="variants-tbody">';
        
        // Store variants data globally for sorting
        window.variantsData = data.product.variants;
        
        resultsHTML += generateVariantRows(data.product.variants);
        resultsHTML += '</tbody>';
        resultsHTML += '</table>';
        resultsHTML += '</div>';
        resultsHTML += '</div>';
      }
      
      resultsContainer.innerHTML = resultsHTML;
      resultsContainer.style.display = 'block';
    }
    
    function generateVariantRows(variants) {
      return variants.map(variant => {
        const bestValueClass = variant.is_best_value ? 'best-value' : '';
        const savings = variant.savings_vs_worst;
        const savingsDisplay = savings ? `${savings.savings_display} (${savings.savings_percentage}%)` : 'N/A';
        const rankDisplay = variant.value_rank || 'N/A';
        
        return `
          <tr class="${bestValueClass}" data-variant-id="${variant.id}">
            <td class="variant-name">
              <strong>${variant.name}</strong>
              ${variant.is_best_value ? '<span class="best-badge">üèÜ Best Value</span>' : ''}
            </td>
            <td class="price">${variant.price_display}</td>
            <td class="quantity">${variant.quantity_text}</td>
            <td class="price-per-unit">${variant.price_per_unit_display}</td>
            <td class="rank">${rankDisplay}</td>
            <td class="savings">${savingsDisplay}</td>
          </tr>
        `;
      }).join('');
    }
    
    function sortTable(sortBy) {
      if (!window.variantsData) return;
      
      let sortedVariants = [...window.variantsData];
      
      switch(sortBy) {
        case 'value_rank':
          sortedVariants.sort((a, b) => (a.value_rank || 999) - (b.value_rank || 999));
          break;
        case 'price_cents':
          sortedVariants.sort((a, b) => a.price_cents - b.price_cents);
          break;
        case 'price_cents_desc':
          sortedVariants.sort((a, b) => b.price_cents - a.price_cents);
          break;
        case 'name':
          sortedVariants.sort((a, b) => a.name.localeCompare(b.name));
          break;
      }
      
      const tbody = document.getElementById('variants-tbody');
      if (tbody) {
        tbody.innerHTML = generateVariantRows(sortedVariants);
      }
    }
    
    function exportResults(jobId, format) {
      const url = `/jobs/${jobId}/export?format=${format}`;
      window.open(url, '_blank');
    }
    
    function shareResults(jobId) {
      const shareUrl = `${window.location.origin}/?job_id=${jobId}`;
      
      if (navigator.share) {
        navigator.share({
          title: 'Product Comparison Results',
          text: 'Check out these product variant analysis results',
          url: shareUrl
        }).catch(err => console.log('Error sharing:', err));
      } else {
        // Fallback to copying to clipboard
        navigator.clipboard.writeText(shareUrl).then(() => {
          alert('Results link copied to clipboard!');
        }).catch(err => {
          // Final fallback - show URL in prompt
          prompt('Copy this link to share results:', shareUrl);
        });
      }
    }
    
    function showJobError(data) {
      const errorContainer = document.getElementById('job-error');
      if (!errorContainer) return;
      
      let errorHTML = '<h3>‚ùå Extraction Failed</h3>';
      errorHTML += '<p>We encountered an error while processing your request:</p>';
      errorHTML += '<div class="error-details">' + data.error_message + '</div>';
      
      errorContainer.innerHTML = errorHTML;
      errorContainer.style.display = 'block';
    }
    
    function pollJobStatus() {
      fetch(`/jobs/${jobId}/status`)
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            console.error('Job not found:', data.error);
            clearInterval(pollTimer);
            return;
          }
          updateJobStatus(data);
        })
        .catch(error => {
          console.error('Error polling job status:', error);
          // Continue polling even on error
        });
    }
    
    // Start polling immediately and then every 2 seconds
    pollJobStatus();
    pollTimer = setInterval(pollJobStatus, pollInterval);
  });
</script>
<% end %>
